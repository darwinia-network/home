{"version":3,"sources":["locales/browserDetector.js","locales/i18n.js","components/AsyncComponent.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["browserDetector","name","lookup","options","navigator","language","userLanguage","cacheUserLanguage","lng","languageDetector","LanguageDetector","addDetector","resources","en","Object","objectSpread","en_us","zh","zh_cn","i18n","use","initReactI18next","init","detection","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","fallbackLng","keySeparator","interpolation","escapeValue","asyncComponent","importComponent","DynamicComponent","lazy","react_default","a","createElement","react","fallback","AsyncHome","Promise","all","__webpack_require__","e","then","bind","AsyncFaq","AsyncNews","AsyncNotFound","history","createBrowserHistory","Routes","react_router","exact","component","path","App","className","Component","Boolean","window","location","hostname","match","TransApp","withTranslation","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"2ldAAeA,EAAA,CACXC,KAAM,UAENC,OAHW,SAGJC,GAGH,OADeC,UAAUC,UAAYD,UAAUE,cAInDC,kBATW,SASOC,EAAKL,sBCDrBM,EAAmB,IAAIC,IAC7BD,EAAiBE,YAAYX,GAM7B,IAAMY,EAAY,CACdC,GAAGC,OAAAC,EAAA,EAAAD,CAAA,GACIE,GAEPC,GAAGH,OAAAC,EAAA,EAAAD,CAAA,GACII,IAIXC,IACKC,IAAIC,KACJD,IAAIX,GACJa,KAAK,CACFV,YAEAW,UAAU,CAENC,MAAO,CAAC,cAAe,SAAU,eAAe,UAAW,YAAa,OAAQ,aAGhFC,kBAAmB,MACnBC,aAAc,UACdC,mBAAoB,aACpBC,oBAAqB,EACrBC,yBAA0B,EAG1BC,OAAQ,CAAC,eAAgB,WAI7BC,YAAa,KACbC,cAAc,EAEdC,cAAe,CACXC,aAAa,KAIVf,MAAf,2NCnDQ,SAASgB,EAAeC,GAC5B,IAAMC,EAAmBC,eAAK,kBAAMF,IAEpC,OAAO,kBACHG,EAAAC,EAAAC,cAACC,EAAA,SAAD,CAAUC,SAAUJ,EAAAC,EAAAC,cAAA,aAChBF,EAAAC,EAAAC,cAACJ,EAAD,oBCJNO,EAAYT,EAAeU,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAC3BC,EAAWhB,EAAeU,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAC1BE,EAAYjB,EAAeU,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAC3BG,EAAgBlB,EAAeY,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YAE/BI,EAAUC,cAGDC,EAAA,kBACXjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQH,QAASA,GACbf,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACIC,OAAK,EACLC,UAAWf,EACXgB,KAAK,MAETrB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACIC,OAAK,EACLC,UAAWR,EACXS,KAAK,SAGTrB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CACIC,OAAK,EACLC,UAAWP,EACXQ,KAAK,UAGTrB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOE,UAAWN,OClBfQ,0LARP,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACXvB,EAAAC,EAAAC,cAACe,EAAD,cAJEO,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVAC,EAAWC,cAAkBT,GACnCU,IAASC,OAAOjC,EAAAC,EAAAC,cAAC4B,EAAD,MAAaI,SAASC,eAAe,SDwH/C,kBAAmBtE,WACrBA,UAAUuE,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.6ece0341.chunk.js","sourcesContent":["export default {\n    name: 'browser',\n\n    lookup(options) {\n        // options -> are passed in options\n        var userLang = navigator.language || navigator.userLanguage;\n        return userLang;\n    },\n\n    cacheUserLanguage(lng, options) {\n        // options -> are passed in options\n        // lng -> current language, will be called after init and on changeLanguage\n\n        // store it\n    }\n};\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport browserDetector from './browserDetector'\n\nimport en_us from './en-us'\nimport zh_cn from './zh-cn'\n\nconst languageDetector = new LanguageDetector();\nlanguageDetector.addDetector(browserDetector);\n\n\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n    en: {\n        ...en_us\n    },\n    zh: {\n        ...zh_cn\n    }\n};\n\ni18n\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .use(languageDetector)\n    .init({\n        resources,\n        // lng: localStorage.getItem(\"lng\") || 'en-us',\n        detection:{\n            // order and from where user language should be detected\n            order: ['querystring', 'cookie', 'localStorage','browser', 'navigator', 'path', 'subdomain'],\n\n            // keys or params to lookup language from\n            lookupQuerystring: 'lng',\n            lookupCookie: 'i18next',\n            lookupLocalStorage: 'i18nextLng',\n            lookupFromPathIndex: 0,\n            lookupFromSubdomainIndex: 0,\n\n            // cache user language on\n            caches: ['localStorage', 'cookie'],\n\n            // optional htmlTag with lang attribute, the default is:\n        },\n        fallbackLng: \"en\",\n        keySeparator: false, // we do not use keys in form messages.welcome\n\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        }\n    });\n\nexport default i18n;\n","import React, {lazy, Suspense} from 'react';\n\n\nexport  function asyncComponent(importComponent) {\n    const DynamicComponent = lazy(() => importComponent);\n\n    return () => (\n        <Suspense fallback={<div></div>}>\n            <DynamicComponent />\n        </Suspense>\n    );\n}\n","import React from \"react\";\nimport {Router, Route, Switch} from \"react-router-dom\";\nimport {asyncComponent} from \"./components/AsyncComponent\";\nimport { createBrowserHistory} from \"history\";\nconst AsyncHome = asyncComponent(import(\"./page/Home\"));\nconst AsyncFaq = asyncComponent(import(\"./page/Faq\"));\nconst AsyncNews = asyncComponent(import(\"./page/News\"));\nconst AsyncNotFound = asyncComponent(import(\"./page/NotFound\"));\n\nconst history = createBrowserHistory();\n\n\nexport default () =>\n    <Router history={history}>\n        <Switch>\n            <Route\n                exact\n                component={AsyncHome}\n                path='/'\n            />\n            <Route\n                exact\n                component={AsyncFaq}\n                path='/faq'\n            />\n\n            <Route\n                exact\n                component={AsyncNews}\n                path='/news'\n            />\n\n            <Route component={AsyncNotFound}/>\n        </Switch>\n    </Router>\n","import React, {Component} from 'react';\nimport Routes from './Routes'\nimport './App.scss'\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Routes/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport i18n from './locales/i18n';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {withTranslation} from \"react-i18next\";\n\nconst TransApp = withTranslation()(App)\nReactDOM.render(<TransApp/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}